:PROPERTIES:
:header-args: :tangle boot.sh :results output :session t
:END:
#+TITLE: Readme

* :toc:
- [[#modules][Modules]]
  - [[#git][git]]
  - [[#shell][shell]]
  - [[#vim][vim]]
  - [[#emacs][emacs]]
- [[#setup][Setup]]
  - [[#sudo-apt-install][sudo apt install]]
  - [[#homebrew][homebrew]]
  - [[#pip3][pip3]]
  - [[#shell-setup][shell setup]]
  - [[#vim-setup][Vim setup]]
  - [[#emacs-setup][Emacs setup]]
  - [[#project-setup][Project setup]]
- [[#programs][Programs]]
  - [[#root][ROOT]]
  - [[#geant4][Geant4]]

* Modules
List and desciption of source dot files and where they should go..
** git
using .gitconfig, global settings for username and email
- [[file:modules/git/.gitconfig][.gitconfig]]
- [[file:modules/git/.git_ignore_global_template][.git_ignore_global_template]]

** shell
using .zshrc, .bashrc, and .bash_profile
- [[file:modules/shell/.bashrc][.bashrc]]
- [[file:modules/shell/.bash_profile][.bash_profile]]
- [[file:modules/shell/.zprofile][.zprofile]]
- [[file:modules/shell/.zshrc][.zshrc]]

** vim
using vimrc mostly to start.. note that vimrc is not prefixed with '.' if placed in .vim dir
- [[file:modules/vim/.vimrc][vimrc]]

** emacs
using .doom.d and symlinks here
- [[file:modules/emacs/config.el][config.el]]
- [[file:modules/emacs/init.el][init.el]]
- [[file:modules/emacs/packages.el][packages.el]]
- [[file:modules/emacs/custom.el][custom.el]]
  
* Setup

For executing org code to do the symlinking for you if you've already got a working emacs!

Example of linking dotfile's init.el to user src:
#+begin_src shell :tangle no
ln -sf "$(pwd)"/modules/emacs/init.el ~/.doom.d/
#+end_src

- Note: alternative setups exist: [[https://www.youtube.com/watch?v=tBoLDpTWVOM][distroTube and atlassian link]]

#+BEGIN_SRC shell
#!/usr/bin/env bash
set -o pipefail
# comming from README.org in dotfiles babel export
#+END_SRC

Main linker function.. Expects a set of dot files, and a particular path to send
the files to. It will create backup files if files already exist and create the
symlinks anyways..

#+begin_src shell

function link_dotfiles() {
# get the dest and src paths first;
dstPath="$1"; shift;
srcPath="$1"; shift;
# move every file to the backup, and prompt user
files=("$@")
for val in "${files[@]}"
do
    # place where the file should live
    dst="$dstPath""$val"
    file="$(pwd)""$srcPath""$val"
    # if it's not a symlink already, move it
    if [[ -L "$dst" ]]; then
        echo  "$val" ", is already linked.."
    elif [[ -f "$dst" ]]; then
        mv "$dst" "$(pwd)""/backup/"
        echo 'backuping up file: '  "$val"
        ln -s "$file" "$dstPath"
    else
        echo 'no original source file: ' "$val"
        ln -s "$file" "$dstPath"
    fi
done
}
#+end_src

#+RESULTS:

Example usage:

#+begin_src shell :tangle no
dotFiles=("ni" "hao" "fren")  # name of files to move to dotFilePath
dotFilePath="$HOME"           # aboslute file path
srcFilePath="/modules/emacs/" # path relative to this repo, include final '/'
link_dotfiles "$dotFilePath" "$srcFilePath" "${dotFiles[@]}"
#+end_src

** sudo apt install

sudo apt install commands from a clean ubuntu machine

- derrived from getting ROOT running on wsl:
#+begin_src shell
## wsl windows dependencies for ROOT and emacs..
function sudoUpdates(){
    sudo apt update
    sudo apt upgrade
    sudo apt install python3-pip
    # required dependencies
    sudo apt-get install git ripgrep
    # optional dependencies
    sudo apt-get install fd-find
    sudo apt-get install direnv
    sudo apt-get install spell
    sudo apt-get install dpkg-dev cmake g++ gcc binutils libx11-dev libxpm-dev libxft-dev libxext-dev python openssl-dev
    sudo apt-get install openssl-dev
    sudo apt install unzip
    sudo apt install llvm
    sudo apt-get install clangd-9
    sudo apt-get install -y shellcheck
    sudo apt install glslang-tools
    sudo apt install fdclone
    sudo apt-get install sqlite3 libsqlite3-dev
    sudo apt-get install jq
    sudo apt-get install graphviz
}
#+end_src

** homebrew

common homebrew commands to get up and running

#+begin_src shell
## getting homebrew
function getBrew() {
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
}
function makeBrew() {
    brew install zsh
    brew install git
    brew install ripgrep
    brew install coreutils
    brew install fd
    brew install python3
    brew install llvm
    brew cask install iterm2
    brew install glslang
    brew install jq
    brew install qt5
    brew install tmux
    brew install xerxes-c
    # emacs based on doom config
    brew tap d12frosted/emacs-plus
    brew install emacs-plus
    ln -s /usr/local/opt/emacs-plus/Emacs.app /Applications/Emacs.app
    # root last
    brew install root
}
function getOhMyZsh() {
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    upgrade_oh_my_zsh
}
#+end_src

** pip3

pip3 installs forming pyenviron base..

#+begin_src shell :results none
pip3 install numpy matplotlib pytest scipy isort pipenv nose pandas tensorflow
#+end_src

** shell setup
here we copy the zshrc and bashrc files that we need based on the system we're running on..

#+begin_src shell
shellFiles=(".bashrc" ".bash_profile")
shellPath="$HOME" # shell files are directly at home..
srcPath="/modules/shell/"
# expect either zsh, or bashrc.. prefer zsh..
if [[ -f "$HOME/.zshrc" ]]; then
    echo  "zshrc stored in home.. configuring zsh.."
    shellFiles=(".zshrc" ".zprofile")
elif [[ -f "$HOME/.bashrc" ]]; then
    echo  "bashrc stored in home.. configuring bash.."
else
    echo "no bash or zsh found.. linking bash for safety"
fi
# move every file to the backup, and prompt user
link_dotfiles "$shellPath/" "$srcPath" "${shellFiles[@]}"
link_dotfiles "$shellPath/" "/modules/git/" ".gitconfig" ".gitignore_global"
#+end_src

** Vim setup

Vim setup should be notoriously light weight considering the bulk of
configuration relies currently on doom-emacs.. Any heavy lifting should be done
there. That said, sometimes it's nice to have sleek 'pure' vim.

Vim expects your config to be here: ~%userprofile%\vimfiles\~

Vim also requires a choice of a bundler.. I use vundle and that is its own git repo, clone it if you don't have it:

#+BEGIN_SRC shell
# if it's not already there, then clone it down
if [[ ! -d "$HOME/.vim/bundle/Vundle.vim" ]]; then
    git clone https://github.com/VundleVim/Vundle.vim.git "$HOME"/.vim/bundle/Vundle.vim
fi
#+END_SRC

More vundle info: [[https://github.com/VundleVim/Vundle.vim][vundle repo]]

#+begin_src shell
## Vim conf ig
# the files that should be in our doom path
vimFiles=("vimrc" "viminfo")
vimPath="$HOME""/.vim/"
srcPath="/modules/vim/"
# vim might not have a .vim directory in $HOME at this point, and may use a 'naked' .vimrc, let's fix that here:
if [[ -f "$HOME/.vimrc" ]]; then
    echo  "vimrc stored in home.. moving to backup.."
    mv "$HOME/.vimrc" "$(pwd)""/backup/vimrc"
fi
# move every file to the backup, and prompt user
link_dotfiles "$vimPath" "$srcPath" "${vimFiles[@]}"
#+end_src

** Emacs setup

If there isn't even doom on your system, then here you go:

#+begin_src shell
function getDoom(){
    git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
    ~/.emacs.d/bin/doom install
}
#+end_src

Snippet will test all doom.d files to see if they're already symlinked. If not,
it will move the files to the backup directory and create symlinks in place.

#+begin_src shell :session t
## Emacs config
# the files that should be in our doom path
emacsFiles=("init.el" "config.el" "packages.el" "custom.el")
doomPath="$HOME""/.doom.d/"
emacsPath="/modules/emacs/"
# move every file to the backup, and prompt user
link_dotfiles "$doomPath" "$emacsPath" "${emacsFiles[@]}"
#+end_src

** Project setup

direnv, projectile, cmake, and emacs variables beg the need of a separate and
related project related dotfile structure..

Realisitically, projects should manage their own dotfiles, but this should
provide a template for modifying or creating new variables.

- direnv [[https://www.willandskill.se/en/install-direnv-on-ubuntu-18-04-in-1-min/][dirEnv on ubuntu]]
- projectile
- cmake
- dir-locals.el

* Programs

Dedicated program depencies. Mostly created specifically to address ROOT depedencies, since it's so pervasive in use.

** TODO ROOT

This section should describe relevant ROOT download sources, and appropriate CMake arguments..


** TODO Geant4

This section should describe relevant Geant4 download sources, and appropriate CMake arguments..

NOTE: this should be built and sourced AFTER ROOT
